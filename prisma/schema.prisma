generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: THREAD SECTION

// TODO: BOARD SECTION

// CHANNEL SECTION

model ThreadChannel {
  id        String @id @default(cuid())
  name      String
  channelId String

  channel Channel @relation(fields: [channelId], references: [id])
}

model BoardChannel {
  id        String @id @default(cuid())
  name      String
  channelId String

  channel Channel @relation(fields: [channelId], references: [id])
}

enum ChannelType {
  MESSAGE
  BOARD
}

model Channel {
  id               String      @id @default(cuid())
  name             String
  type             ChannelType
  channelSectionId String

  ChannelSection ChannelSection  @relation(fields: [channelSectionId], references: [id])
  BoardChannel   BoardChannel[]
  ThreadChannel  ThreadChannel[]
}

model ChannelSection {
  id          String @id @default(cuid())
  workspaceId String

  Workspace Workspace @relation(fields: [workspaceId], references: [id])
  channels  Channel[]
}

// WORKSPACE SECTION

model Workspace {
  id      String @id @default(cuid())
  name    String
  ownerId String

  owner           User             @relation("OwnedWorkspaces", fields: [ownerId], references: [id])
  channelSections ChannelSection[]
}

// CLIENT SECTION

model User {
  ownedWorkspaces Workspace[] @relation("OwnedWorkspaces")

  // The following properties and relations are used by next-auth, DO NOT CHANGE

  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
}

// The following models are used by next-auth, DO NOT CHANGE

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
